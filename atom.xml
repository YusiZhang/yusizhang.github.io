<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech jibber-jabbers]]></title>
  <link href="http://yusizhang.github.io/atom.xml" rel="self"/>
  <link href="http://yusizhang.github.io/"/>
  <updated>2015-10-11T23:40:52-07:00</updated>
  <id>http://yusizhang.github.io/</id>
  <author>
    <name><![CDATA[Yusi Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Cursive, the Clojure IDE Built on IntelliJ]]></title>
    <link href="http://yusizhang.github.io/blog/2015/10/07/the-clojure-ide-cursive-in-intellij/"/>
    <updated>2015-10-07T16:14:02-07:00</updated>
    <id>http://yusizhang.github.io/blog/2015/10/07/the-clojure-ide-cursive-in-intellij</id>
    <content type="html"><![CDATA[<h2>Agenda</h2>

<ol>
<li><a href="#Install%20IntelliJ">Install IntelliJ</a></li>
<li>Install Cursive plug-in</li>
<li>IntelliJ basics</li>
<li>Create a demo project with clojure and java module</li>
<li>REPL</li>
<li>Jar Clojure module</li>
<li>Invode and Debug clojure code in Java module</li>
</ol>


<!-- more -->


<h2><a id="Install IntelliJ">Install IntelliJ</a></h2>

<p>You can download the IntelliJ <a href="https://www.jetbrains.com/idea/download/index.html">here</a> Cursive plug in will work with IntelliJ with version 12.1, 13.1, 14.1 and the 15 EAP. All the following examples will be using version 14.1 in Mac OS X</p>

<h2>Install Cursive plug-in</h2>

<p>Open &ldquo;IntelliJ IDEA&rdquo; &ndash;> &ldquo;Preference&rdquo; &ndash;> &ldquo;Plugins&rdquo; &ndash;> &ldquo;Browse Repositories&rdquo; &ndash;> &ldquo;Manage Repositories&rdquo;</p>

<p><img class="center" src="http://yusizhang.github.io/images/install-cursive-plugin.png"></p>

<p>Add this repository url based on the IntelliJ version you are using. In this case it is
<a href="https://cursiveclojure.com/plugins-14.1.xml">https://cursiveclojure.com/plugins-14.1.xml</a></p>

<p>You can see other repository urls for different versions <a href="https://cursiveclojure.com/userguide/index.html">here</a></p>

<p>After that, you can see &ldquo;cursive-**&rdquo; in the list. Install it and restart the IntelliJ.</p>

<h2>IntelliJ Baiscs</h2>

<p>If you are coming from Eclipse, these tips may be helpful.</p>

<ol>
<li><p>There is no &ldquo;save&rdquo; button in IntelliJ. You can check all your changes from the &ldquo;Local History&rdquo;. It is like a VCS but it is only for personal use. To see your history changes, you can do shortcut &ldquo;cmd + shift + a&rdquo; to bring up the action window. And type in &ldquo;local history&rdquo;, press enter.</p></li>
<li><p>There is no &ldquo;workspace&rdquo; in IntelliJ. What is called &ldquo;project&rdquo; in IntelliJ is like &ldquo;workspace&rdquo; in the Eclipse. &ldquo;project&rdquo; in Eclipse is like &ldquo;module&rdquo; in IntelliJ.</p></li>
<li><p>IntelliJ is not compiling your codes automatically. Unlike Eclipse, which do an auto-compilation when you push the save button. Since there is no &ldquo;save&rdquo; in IntelliJ, there won&rsquo;t be auto-compilation. Normally it will compile for you when you invoke &ldquo;make&rdquo;, which happens before you run a test by default. Don&rsquo;t worry about that too much at this moment, you will get used to it pretty soon.</p></li>
<li><p>Change your dependencies in &ldquo;Module Setting&rdquo;. Like setting the class path and lib in the Eclipse, dependencies settings are located at &ldquo;Module Setting&rdquo;(right click on the module)</p></li>
</ol>


<h2>Create a Demo Project with Clojure and Java Module</h2>

<p>I will create a project mixed by clojure module and java module. And I will show you how to do REPL and debug in the next two sections using this project.</p>

<ul>
<li><p>&ldquo;IntelliJ IDEA&rdquo;&ndash;>&ldquo;File&rdquo;&ndash;>&ldquo;New&rdquo;&ndash;>&ldquo;Project&rdquo; Then select Empty Project.</p></li>
<li><p>Type in project name and location. And finish.</p></li>
<li><p>Create a new clojure module within the project you just created. Choose type Leiningen on the left. Next. Click &ldquo;Use snapshots&rdquo;. Finish. I name it &ldquo;clojuredemo&rdquo;</p></li>
</ul>


<p>Leiningen is a management tool for clojure project/module.</p>

<ul>
<li>Create a new clojure namespace named &ldquo;core&rdquo; in clojuredemo module under src dir.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(ns clojuredemo.core)
</span><span class='line'>(defn foo
</span><span class='line'>  "I don't do a whole lot."
</span><span class='line'>  [x]
</span><span class='line'>  (println x "Hello, World!"))</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Create a new java module in the same project. I name it &ldquo;java-demo&rdquo;. Include &ldquo;Clojure(1.7.0)&rdquo; in the &ldquo;Additional Libraries and Frameworks&rdquo;.</p></li>
<li><p>Create a new java class named &ldquo;DemoJava&rdquo; in the java-demo module under src dir.</p></li>
</ul>


<p>If everything goes right, you should see something like this:</p>

<p><img class="center" src="http://yusizhang.github.io/images/modules.png"></p>

<h2>REPL</h2>

<p>For more information about REPL, please see this <a href="http://www.braveclojure.com/getting-started/">page</a>.</p>

<p>Right click the <em>clojuredemo</em> module and create a REPL for the current module. And select &ldquo;Run nREPL with Leiningen&rdquo;. OK.</p>

<p>Run REPL. You should see a REPL window prompts to you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting nREPL server...
</span><span class='line'>...
</span><span class='line'>Connecting to local nREPL server...
</span><span class='line'>Clojure 1.6.0
</span><span class='line'>nREPL server started on port 49950 on host 127.0.0.1 - nrepl://127.0.0.1:49950</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you can load the file to the REPL or you can switch REPL NS to current file. Let&rsquo;s do switch REPL NS to current file.</p>

<p><img class="center" src="http://yusizhang.github.io/images/REPL.png"></p>

<p>Then you can type in <code>(foo "UC")</code> in the cmd line. The result <code>UC Hello, World!</code> will be shown in the REPL window.</p>

<p>You can also do a short cut &ldquo;cmd + shift + p&rdquo; to execute individual forms.</p>

<p><a href="https://cursiveclojure.com/userguide/repl.html">More about REPL in IntelliJ</a>.</p>

<h2>Jar Clojure module</h2>

<p>If you create your clojure module using Leiningen, then you should see a project.clj file in the dir.</p>

<p>You should see something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defproject clojuredemo "0.1.0-SNAPSHOT"
</span><span class='line'>  :description "FIXME: write description"
</span><span class='line'>  :url "http://example.com/FIXME"
</span><span class='line'>  :license {:name "Eclipse Public License"
</span><span class='line'>            :url "http://www.eclipse.org/legal/epl-v10.html"}
</span><span class='line'>  :dependencies [[org.clojure/clojure "1.6.0"]]
</span><span class='line'>  )</span></code></pre></td></tr></table></div></figure>


<p>Adding these two line after the &ldquo;:dependencies&hellip;&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> :jar-name "clojuredemo.jar"
</span><span class='line'> :jar-path "/target/clojuredemo.jar"</span></code></pre></td></tr></table></div></figure>


<p>Open the terminal. cd to the clojuredemo dir. And execute this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lein jar</span></code></pre></td></tr></table></div></figure>


<p>If everything goes right, you can see the &ldquo;clojuredemo.jar&rdquo; in the /target folder.</p>

<h2>Invode and Debug clojure code in Java module</h2>

<p>In the java-demo module, add Jar dependency for clojuredemo.jar. And change your DemoJava.java file to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">import</span> <span class="nn">clojure.java.api.Clojure</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">clojure.lang.IFn</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoJava</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invokeMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Require clojuredemo.core</span>
</span><span class='line'>        <span class="n">IFn</span> <span class="n">require</span> <span class="o">=</span> <span class="n">Clojure</span><span class="o">.</span><span class="na">var</span><span class="o">(</span><span class="s">&quot;clojure.core&quot;</span><span class="o">,</span> <span class="s">&quot;require&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">require</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Clojure</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="s">&quot;clojuredemo.core&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="c1">// Invode foo method in core.clj</span>
</span><span class='line'>        <span class="n">IFn</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Clojure</span><span class="o">.</span><span class="na">var</span><span class="o">(</span><span class="s">&quot;clojuredemo.core&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">foo</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="s">&quot;UC&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DemoJava</span> <span class="n">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DemoJava</span><span class="o">();</span>
</span><span class='line'>        <span class="n">demo</span><span class="o">.</span><span class="na">invokeMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember to include &ldquo;Leiningen: org.clojure/clojure:1.7.0&rdquo; in the dependency.</p>

<p>Then you can run the DemoJava in IntelliJ. You should see <code>UC Hello, World!</code> in the console.</p>

<p>Now let&rsquo;s do debug.</p>

<p>Set a break point at the line <code>demo.invokeMethod()</code>. And run the debug. Try out step in and step out yourself, just like what you do in the Eclipse.</p>

<p>I am sure you will be amazed by it allows you step from java code to clojure code!</p>

<p><img class="center" src="http://yusizhang.github.io/images/debug1.png">
<img class="center" src="http://yusizhang.github.io/images/debug2.png"></p>

<h2>Important link</h2>

<p><a href="https://cursiveclojure.com/">Cursive User Guide</a></p>

<p><a href="https://www.jetbrains.com/idea/download/index.html">IntelliJ download</a></p>

<p><a href="http://www.braveclojure.com/getting-started/">Building, Running and the REPL</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Cheatsheet]]></title>
    <link href="http://yusizhang.github.io/blog/2015/10/06/clojure-cheatsheet/"/>
    <updated>2015-10-06T13:23:46-07:00</updated>
    <id>http://yusizhang.github.io/blog/2015/10/06/clojure-cheatsheet</id>
    <content type="html"><![CDATA[<h2>Define Function</h2>

<p>Write a function which returns a personalized greeting.
(= (__ &ldquo;Dave&rdquo;) &ldquo;Hello, Dave!&rdquo;)</p>

<p><a href="https://www.4clojure.com/problem/16">Hello World</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fn [name] (str "Hello, ", name, "!"))</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<p>&ldquo;#(str "Hello, &rdquo; % &ldquo;!&rdquo;)"</p>

<!-- more -->


<h2>Filter</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(filter #(&gt; % 5) '(3 4 5 6 7))</span></code></pre></td></tr></table></div></figure>


<p>returns &lsquo;(6 7)</p>

<h2>Local Bindings</h2>

<p>Clojure lets you give local names to values using the special <strong>let-form</strong>.</p>

<p>Sample1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(let [x 5] (+ 2 x))</span></code></pre></td></tr></table></div></figure>


<p>In Java something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int x = 5;
</span><span class='line'>x + 2;</span></code></pre></td></tr></table></div></figure>


<p>Sample2</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(let [x 3, y 10] (- y x))</span></code></pre></td></tr></table></div></figure>


<p>In Java something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int x = 3, y = 10;
</span><span class='line'>y - x;</span></code></pre></td></tr></table></div></figure>


<h2>Recursion</h2>

<p>A recursive function is a function which calls itself. This is one of the fundamental techniques used in functional programming.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defn recursionFn [x]
</span><span class='line'>  (when (&gt; x 0)
</span><span class='line'>    (conj (recursionFn (dec x)) x)))
</span><span class='line'>
</span><span class='line'>=&gt;(recursion 5)
</span><span class='line'>=&gt;[5 4 3 2 1]</span></code></pre></td></tr></table></div></figure>


<h2>Rearranging Code &ldquo;->&rdquo; vs &ldquo;->>&rdquo;</h2>

<p>These two lines are the same</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(sort (rest (reverse [2 5 4 1 3 6])))
</span><span class='line'>
</span><span class='line'>(-&gt; [2 5 4 1 3 6] (reverse) (rest) (sort))</span></code></pre></td></tr></table></div></figure>


<p>I like this explaination:</p>

<blockquote><p>;; let's compare thread first (->) and thread last ( ->> )<br/>user=> (macroexpand '(-> 0 (+ 1) (+ 2) (+ 3)))<br/>(+ (+ (+ 0 1) 2) 3)<br/>user=> (macroexpand '(->> 0 (+ 1) (+ 2) (+ 3)))<br/>(+ 3 (+ 2 (+ 1 0)))</p><footer><strong>deddu</strong> <cite><a href='https://clojuredocs.org/clojure.core/-%3E%3E#example-55416db5e4b01bb732af0a8c'>clojuredocs.org/clojure.core/&hellip;</a></cite></footer></blockquote>


<h2>Loop and recur</h2>

<p>(loop [bindings<em>] exprs</em>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt;(loop [x 10]
</span><span class='line'>  (when (&gt; x 0)
</span><span class='line'>      (if (&gt; x 5)
</span><span class='line'>          (print x)
</span><span class='line'>          (print (* -1 x)))
</span><span class='line'>      (recur (- x 1))))
</span><span class='line'>
</span><span class='line'>=&gt;-10-9-8-7-6-54321</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark Down Cheatsheet]]></title>
    <link href="http://yusizhang.github.io/blog/2015/10/02/hello-world/"/>
    <updated>2015-10-02T14:45:20-07:00</updated>
    <id>http://yusizhang.github.io/blog/2015/10/02/hello-world</id>
    <content type="html"><![CDATA[<h2>Headings</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The largest heading (an &lt;h1&gt; tag)
</span><span class='line'>## The second largest heading (an &lt;h2&gt; tag)
</span><span class='line'>###### The 6th largest heading (an &lt;h6&gt; tag)</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>Blockquotes</h2>

<p>In the words of Abraham Lincoln:</p>

<blockquote><p>Pardon my french</p></blockquote>

<h2>Styling text</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*This text will be italic*
</span><span class='line'>**This text will be bold**
</span><span class='line'>**Everyone _must_ attend the meeting at 5 o'clock today.**</span></code></pre></td></tr></table></div></figure>


<h2>Lists</h2>

<h3>Unordered lists</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Item1
</span><span class='line'>* Item2</span></code></pre></td></tr></table></div></figure>


<h2>Links</h2>

<p><a href="http://yusizhang.github.io/">Visit GitHub!</a></p>

<h2>Code Snippets</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:yusizhang/yusizhang.github.io.git # fork yusizhang.github.io</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
