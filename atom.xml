<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech jibber-jabbers]]></title>
  <link href="http://yusizhang.github.io/atom.xml" rel="self"/>
  <link href="http://yusizhang.github.io/"/>
  <updated>2015-10-06T17:28:25-07:00</updated>
  <id>http://yusizhang.github.io/</id>
  <author>
    <name><![CDATA[Yusi Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Cheatsheet]]></title>
    <link href="http://yusizhang.github.io/blog/2015/10/06/clojure-cheatsheet/"/>
    <updated>2015-10-06T13:23:46-07:00</updated>
    <id>http://yusizhang.github.io/blog/2015/10/06/clojure-cheatsheet</id>
    <content type="html"><![CDATA[<h2>Define Function</h2>

<p>Write a function which returns a personalized greeting.
(= (__ &ldquo;Dave&rdquo;) &ldquo;Hello, Dave!&rdquo;)</p>

<p><a href="https://www.4clojure.com/problem/16">Hello World</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(fn [name] (str "Hello, ", name, "!"))</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<p>&ldquo;#(str "Hello, &rdquo; % &ldquo;!&rdquo;)"</p>

<!-- more -->


<h2>Filter</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(filter #(&gt; % 5) '(3 4 5 6 7))</span></code></pre></td></tr></table></div></figure>


<p>returns &lsquo;(6 7)</p>

<h2>Local Bindings</h2>

<p>Clojure lets you give local names to values using the special <strong>let-form</strong>.</p>

<p>Sample1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(let [x 5] (+ 2 x))</span></code></pre></td></tr></table></div></figure>


<p>In Java something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int x = 5;
</span><span class='line'>x + 2;</span></code></pre></td></tr></table></div></figure>


<p>Sample2</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(let [x 3, y 10] (- y x))</span></code></pre></td></tr></table></div></figure>


<p>In Java something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int x = 3, y = 10;
</span><span class='line'>y - x;</span></code></pre></td></tr></table></div></figure>


<h2>Recursion</h2>

<p>A recursive function is a function which calls itself. This is one of the fundamental techniques used in functional programming.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(defn recursionFn [x]
</span><span class='line'>  (when (&gt; x 0)
</span><span class='line'>    (conj (recursionFn (dec x)) x)))
</span><span class='line'>
</span><span class='line'>=&gt;(recursion 5)
</span><span class='line'>=&gt;[5 4 3 2 1]</span></code></pre></td></tr></table></div></figure>


<h2>Rearranging Code &ldquo;->&rdquo; vs &ldquo;->>&rdquo;</h2>

<p>These two lines are the same</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(sort (rest (reverse [2 5 4 1 3 6])))
</span><span class='line'>
</span><span class='line'>(-&gt; [2 5 4 1 3 6] (reverse) (rest) (sort))</span></code></pre></td></tr></table></div></figure>


<p>I like this explaination:</p>

<blockquote><p>;; let's compare thread first (->) and thread last ( ->> )<br/>user=> (macroexpand '(-> 0 (+ 1) (+ 2) (+ 3)))<br/>(+ (+ (+ 0 1) 2) 3)<br/>user=> (macroexpand '(->> 0 (+ 1) (+ 2) (+ 3)))<br/>(+ 3 (+ 2 (+ 1 0)))</p><footer><strong>deddu</strong> <cite><a href='https://clojuredocs.org/clojure.core/-%3E%3E#example-55416db5e4b01bb732af0a8c'>clojuredocs.org/clojure.core/&hellip;</a></cite></footer></blockquote>


<h2>Loop and recur</h2>

<p>(loop [bindings<em>] exprs</em>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt;(loop [x 10]
</span><span class='line'>  (when (&gt; x 0)
</span><span class='line'>      (if (&gt; x 5)
</span><span class='line'>          (print x)
</span><span class='line'>          (print (* -1 x)))
</span><span class='line'>      (recur (- x 1))))
</span><span class='line'>
</span><span class='line'>=&gt;-10-9-8-7-6-54321</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark Down Cheatsheet]]></title>
    <link href="http://yusizhang.github.io/blog/2015/10/02/hello-world/"/>
    <updated>2015-10-02T14:45:20-07:00</updated>
    <id>http://yusizhang.github.io/blog/2015/10/02/hello-world</id>
    <content type="html"><![CDATA[<h2>Headings</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The largest heading (an &lt;h1&gt; tag)
</span><span class='line'>## The second largest heading (an &lt;h2&gt; tag)
</span><span class='line'>###### The 6th largest heading (an &lt;h6&gt; tag)</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>Blockquotes</h2>

<p>In the words of Abraham Lincoln:</p>

<blockquote><p>Pardon my french</p></blockquote>

<h2>Styling text</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*This text will be italic*
</span><span class='line'>**This text will be bold**
</span><span class='line'>**Everyone _must_ attend the meeting at 5 o'clock today.**</span></code></pre></td></tr></table></div></figure>


<h2>Lists</h2>

<h3>Unordered lists</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Item1
</span><span class='line'>* Item2</span></code></pre></td></tr></table></div></figure>


<h2>Links</h2>

<p><a href="http://yusizhang.github.io/">Visit GitHub!</a></p>

<h2>Code Snippets</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:yusizhang/yusizhang.github.io.git # fork yusizhang.github.io</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
